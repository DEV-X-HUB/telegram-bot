
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum PostStatus {
  open 
  closed 
  pending
  rejected
}
enum NotifyOption {
  none 
  follower 
  friend
}

model User {
  id           String  @id @default(uuid()) // UUID type for user_id
  username     String?  @unique
  first_name   String // Required first name
  last_name    String // Required last name
  age          Int // Required age
  phone_number String  @unique // Unique phone number
  tg_id        String  @unique // Unique tg_id
  email        String? // Optional email
  country      String? // Optional country
  city         String? // Optional city
  gender       String? // Optional gender
  display_name String? // Optional display name
  bio          String? // Optional bio

  followings Follows[]  @relation("Following")
  followers  Follows[]  @relation("Follower")
  posts      Post[]
  created_at  DateTime   @default(now())
}

model Follows {
  id           String @id @default(uuid())
  follower_id  String 
  following_id String
  follower     User   @relation("Follower", fields: [follower_id], references: [id])
  following    User   @relation("Following", fields: [following_id], references: [id])
  @@unique([follower_id, following_id])
}


model Post {
  id           String   @id @default(uuid()) 
  description  String
  status       PostStatus   @default(pending)
  category     String
  notify_option NotifyOption   @default(none)

  user        User     @relation(fields: [user_id], references: [id]) 
  user_id     String

  // Define relation with categories and sub categories models
  Service1A   Service1A? 
  Service1B   Service1B?
  Service1C   Service1C?
  Service2    Service2?
  Service3    Service3?
  Service4ChickenFarm Service4ChickenFarm?
  Service4Manufacture Service4Manufacture?
  Service4Construction Service4Construction?
}




model Service1A {
  id                String   @id @default(uuid()) 
  post_id           String   @unique
  arbr_value        String 
  id_first_option   String 
  location          String 
  woreda            String 
  last_digit        String
  photo             String[] 
  post              Post @relation(fields: [post_id], references: [id],onDelete: Cascade)
}

model Service1B {
  id                          String   @id @default(uuid()) 
  post_id                     String   @unique
  title                       String 
  main_category               String 
  sub_category                String 
  id_first_option             String 
  last_digit                  String
  condition                   String 
  issue_date                  DateTime? 
  expire_date                 DateTime? 
  location                    String? 
  woreda                      String 
  photo                       String[] 
  post                        Post @relation(fields: [post_id], references: [id])
}

model Service1C {
  id                          String   @id @default(uuid()) 
  post_id                     String   @unique
  arbr_value                  String
  paper_stamp                 String 
  id_first_option             String 
  woreda                      String 
  service_type_1              String 
  service_type_2              String 
  service_type_3              String 
  last_digit                  String
  confirmation_year           DateTime
  photo                       String[] 
  post                        Post @relation(fields: [post_id], references: [id])
}
model Service2 {
  id                          String   @id @default(uuid()) 
  post_id                     String   @unique
  service_type                String
  title                       String 
  photo                       String[] @default([])
  post                        Post @relation(fields: [post_id], references: [id])
}



model Service3 {
  id                     String   @id @default(uuid())
  post_id                String   @unique
  birth_or_marital       String
  title                  String
  photo                  String[] // Required array of photo URLs

  post                  Post @relation(fields: [post_id], references: [id])
}


model Service4ChickenFarm {

  id                      String   @id @default(uuid()) 
  post_id                 String   @unique
  sector                  String
  estimated_capital       String
  enterprise_name         String
  post                    Post @relation(fields: [post_id], references: [id])

}


model Service4Manufacture {
  id                        String   @id @default(uuid()) 
  post_id                   String   @unique
  sector                    String
  number_of_workers         Int
  estimated_capital         String
  enterprise_name           String
  photo                     String[] // Required array of photo URLs
  post                     Post @relation(fields: [post_id], references: [id])
}


model Service4Construction {
  id                        String   @id @default(uuid())
  post_id                   String   @unique
  construction_size         String?
  company_experience        String?
  document_request_type     String?
  land_size                 String?
  land_status               String?
  location                  String
  photo                     String[] // Required array of photo URLs
  post                      Post @relation(fields: [post_id], references: [id])
}



