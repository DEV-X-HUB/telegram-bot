"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateString = exports.trimParagraph = exports.extractElements = exports.formatResetOptEmailMsg = exports.formatAccountCreationEmailMsg = exports.getSectionName = exports.capitalize = exports.capitalizeFirstLetter = exports.isInMarkUPOption = exports.isInInlineOption = exports.formatNumberWithCommas = exports.areEqaul = void 0;
const config_1 = __importDefault(require("../../config/config"));
const areEqaul = (text1, text2, ignoreCase) => {
    if (ignoreCase)
        return text1.toLocaleLowerCase().trim() == text2.toLocaleLowerCase().trim();
    return text1.trim() == text2.trim();
};
exports.areEqaul = areEqaul;
const formatNumberWithCommas = (num) => {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
};
exports.formatNumberWithCommas = formatNumberWithCommas;
const isInInlineOption = (text, options) => {
    let exists = false;
    options.forEach((rowOption) => {
        rowOption.forEach((option) => {
            if ((0, exports.areEqaul)(option.cbString, text, true))
                exists = true;
        });
    });
    return exists;
};
exports.isInInlineOption = isInInlineOption;
// check if the text is in the markup options
const isInMarkUPOption = (text, options) => {
    let exists = false;
    options.forEach((rowOption) => {
        rowOption.forEach((option) => {
            if ((0, exports.areEqaul)(option.text, text, true))
                exists = true;
        });
    });
    return exists;
};
exports.isInMarkUPOption = isInMarkUPOption;
const capitalizeFirstLetter = (word) => {
    return word[0].toLocaleUpperCase() + word.slice(1);
};
exports.capitalizeFirstLetter = capitalizeFirstLetter;
const capitalize = (word) => {
    return word.charAt(0).toLocaleUpperCase() + word.slice(1);
};
exports.capitalize = capitalize;
const getSectionName = (category) => {
    switch (category) {
        case 'Section 1A':
            return 'Service1A';
        case 'Section 1B':
            return 'Service1B';
        case 'Section 1C':
            return 'Service1C';
        case 'Section 1A':
            return 'Service1A';
        case 'Section 2':
            return 'Service2';
        case 'Section 3': {
            return 'Service3';
        }
        case 'Chicken Farm':
            return 'Service4ChickenFarm';
        case 'Construction':
            return 'Service4Construction';
        case 'Manufacture':
            return 'Service4Manufacture';
    }
};
exports.getSectionName = getSectionName;
const formatAccountCreationEmailMsg = (password) => {
    return `<!DOCTYPE html>
  <html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Account Created</title>
  </head>
  <body>
      <div style="font-family: Arial, sans-serif; text-align: center; margin: 20px;">
          <h1>ðŸŽ‰ Your admin account have been created successfuly! ðŸŽ‰</h1>
          <p style="font-size: 18px;">Use this password to sign in: <strong>${password}</strong></p>
          <p style="font-size: 14px; color: gray;">This message is generated by DummyBot. Please do not reply.</p>
      </div>
  </body>
  </html>
  `;
};
exports.formatAccountCreationEmailMsg = formatAccountCreationEmailMsg;
const formatResetOptEmailMsg = (otp) => {
    return `<!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Reset Your Password</title>
 </head>
 <body>
     <div style="font-family: Arial, sans-serif; text-align: center; margin: 20px;">
         <h1>ðŸ”’ Use this OTP to reset your password: <span style="color: red; font-weight: bold;">${otp}</span></h1>
         <p style="font-size: 14px; color: gray;">This message is generated by DummyBot. Please do not reply.</p>
     </div>
 </body>
 </html>
 `;
};
exports.formatResetOptEmailMsg = formatResetOptEmailMsg;
function extractElements(arr) {
    const length = arr === null || arr === void 0 ? void 0 : arr.length;
    if (length < 2)
        return undefined; // If the array is empty, return undefined
    const firstNMinusOne = arr === null || arr === void 0 ? void 0 : arr.slice(0, length - 1); // Extract first n-1 elements
    const lastElement = arr[length - 1]; // Extract the last element
    return { firstNMinusOne, lastElement }; // Return both arrays as a tuple
}
exports.extractElements = extractElements;
const trimParagraph = (paragraph, maxLength = 4) => {
    const words = paragraph.split(' ');
    if (words.length <= (parseInt(config_1.default.desc_preview_word_length) || 5)) {
        return paragraph;
    }
    return words.slice(0, maxLength).join(' ') + '...';
};
exports.trimParagraph = trimParagraph;
// Check that thee number of words in the string is less than wordLength and total number of characters is less than letterSize and each word is less than wordSize characters
const validateString = ({ value, wordLength, textName, wordSize = 15, letterSize, }) => {
    wordSize = wordSize || 15;
    letterSize = letterSize || wordLength * wordSize;
    // Remove leading/trailing whitespace and empty words
    const trimmedValue = value.trim().replace(/\s\s+/g, ' '); // Replace multiple spaces with single spaces
    // Split into trimmed words and check word count
    const words = trimmedValue.split(' ').filter((word) => word.length > 0); // Filter out empty words
    if (words.length > wordLength) {
        return { isValid: false, errorMessage: `${textName} exceeds maximum word limit of ${wordLength}` };
    }
    // Check character length without spaces
    const characters = trimmedValue.replace(/\s/g, '').length;
    if (characters > letterSize) {
        return { isValid: false, errorMessage: `${textName} exceeds maximum character limit of ${letterSize}` };
    }
    // Check individual word lengths
    const wordLengthCheck = words.every((word) => word.length <= wordSize);
    if (!wordLengthCheck) {
        return { isValid: false, errorMessage: `Individual word length exceeds maximum of ${wordSize} character` };
    }
    return { isValid: true }; // All checks passed
};
exports.validateString = validateString;
//# sourceMappingURL=string.js.map